DAY (2) NETFLIX CLONE
0. Introduction
Go to Project directory then do this :
Note: when createing a new App make sure it all lowercase
=> npx create-react-app netflix-clone --template redux

Note: make sure not to used Appcase first letter for naming class in css

1. SETING UP DATABASE
Go to firebase create a new Project, make sure you tick unable, by default it is anable. 

after the Project is create go to settings then click on this => </, this is where you can Register the credetial of your App. 
after u click on it, it will asked u to Register your App, give it a a name, tick where it says Also set up Firestore hosting, then click on the Register app btn, then it will give you this command => npm install -g firebase-tools, go to ur teminal and install it, then click <next> btn, then click continue, then go and click config ,then copy that firebase Config code.

(2) click on authentication,clik on Getstarted, then choose Email, then tick only on the first Enable the click save. done, now we have enable Google authentication in our Project.

(3) go to features folder => counter folder, cut the file => counterSlice.js and past it inside features folder
(4) go to app folder/store.js:
// import counterReducer from '../features/counter/counterSlice'; from this
import counterReducer from '../features/counterSlice'; to this

(5) BUILDING THE NAVBAR 
if you wanna get any picture link go to google search for the pic then right click on it and choose where it says copy image adress

(5) WORKING WITH API 
go to this site: 
https://www.themoviedb.org/settings/api
logIn then gor on the right top click on the pink round thing then a drop down will display then choose settings ,then API then give your information to generate a new API key for you 

here is the key : 30221dcc07d3e97c102c5cee98047de6
(6) download npm install axios for working with API

then i create 2 files, 1 axios.js, Request.js, axios to get the url and request to store the KEY for the API
inside theaxiso i have the API url link, then inside Request.j file i have diff kind of movies that wanna request.

then i went in the banner.js file then grab the data there 

(7) DEPLOYEMENT USING FIREBASE. THIS IS BASICLY CONNECTING OUR APP WITH FIREBASE 
=> firebase login

Note: when u are doing this, it is globally in the machin terminal, make sure all these steps your iniside the Projects Directory 
example => D:\REACT JS PROJECTS\netflix-clone

it will show this=> 
=> D:\REACT JS PROJECTS\netflix-clone firebase login
Already logged in as chadrackkyungu624@gmail.com

=> firebase init
choose y, then choose Hosting by clicking on space key on ur keyboard,

then choose an existing Projects.

? What do you want to use as your public directory? (public)    type =>  build then it enter

Configure as a single-page app (rewrite all urls to /index.html)?    type => y and it enter 
? Set up automatic builds and deploys with GitHub? (y/N)     type => n it enter. 
Done
 

 (8) AFTER CONNECTING, NOW WE ARE BUNDLING OUR APP AND PASS IT TO FIREBASE
 Note: to do this make sure u are inside your Project Directory
 Example: D:\REACT JS PROJECTS\netflix-clone>
 => npm run build

 Done!!

 (9) DEPLOY NOW 
 => firebase deploy 100% successfull

 DAY (3) AUTHENTICATION 
 make sure you have firebase.js file in your project
 now install:
 => npm install firebase
 => npm install react-router-dom //=> this is for navigating between screens

 (1) building the sign up screen
 (2) Implementing the Authentication 
 i first do the connetion inside the file firebase.js 
 then i use it inside the SignUpScreen.js ,
 then now I'm using it inside the App.js to check if the user was logIn already he/she go to home page even whe he refresh the as long as is login already he should be go to home page already.

 (3) IMPLEMENTING REDUX TO PASS THE USER ACTION, WHICH IS LOGIN & LOGOUT
 Note: after we have the user information, now we know that the user as logIn or logout, we need to pass the logIn info inside the All 
 App so that we ca do something with that information.

 we create the Redux inside /features/userSlice.js, then we store our redux inside /app/store.js, then we pass the store to the Entire App, inside index.js file, remember if you use next.js, some of these steps are done already. 

 